{
    "swagger": "2.0",
    "info": {
        "description": "API Server for SCTI 2025",
        "title": "SCTI 2025 API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/change-name": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the authenticated user's first and last name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change user name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "New name information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangeUserNameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/change-password": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Changes the user's password using a reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "New password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Returns a list of all events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get all events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Event"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Creates a new event. Only master users can create events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Event creation info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Event"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/created": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all events created by a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get events created by a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Event"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/public": {
            "get": {
                "description": "Returns a list of all public events (where IsPublic=true)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get all public events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Event"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}": {
            "get": {
                "description": "Returns an event's details by its slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Event"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deletes an existing event using its slug. Only master users can delete events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete an event by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates an existing event using its slug. Only master users can update events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an event by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Event update info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Event"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/accesses": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all accesses for a specified user from a specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of accesses for a user from an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.AccessTarget"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activities": {
            "get": {
                "description": "Returns all activities for the specified event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Get all activities for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Activity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Creates a new activity for the specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Create a new activity for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity creation info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateActivityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Activity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deletes an existing activity from the specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Delete an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity deletion info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityDeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates an existing activity for the specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Update an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity update info with ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Activity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/attend": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Marks a user as having attended an activity (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Mark attendance for an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attendance info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/attendants/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all attendants for a specified activity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of attendants for an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Activity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ActivityRegistration"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/register": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Registers the authenticated user to an activity within an event they are already registered for",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Register to an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity registration info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/register-standalone": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Registers the authenticated user to a standalone activity without requiring event registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Register to a standalone activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity registration info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/registrations/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all registrations of a specified activity (all admins)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of registrations of an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Activity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ActivityRegistration"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/unattend": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes a user's attendance record for an activity (master admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Remove attendance for an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attendance info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/unregister": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unregisters the authenticated user from an activity within an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Unregister from an activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity registration info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/activity/unregister-standalone": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unregisters the authenticated user from a standalone activity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Unregister from a standalone activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity registration info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActivityRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/demote": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Demotes a user from their admin role in an event. The following rules apply:\n- Only super users, event creators and master admins can demote others\n- Super users and event creators can demote any admin (master or normal)\n- Master admins can only demote normal admins\n- Users cannot demote themselves\n- Super users and event creators cannot be demoted\n- Super users and event creators cannot be promoted\n- Target must be an admin of the event\n- Targets can be demoted if they unregister from the event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Demote user in event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User email to demote",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAdminActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/product": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Creates a new product for the specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create a product for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product creation info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deletes an existing product from the specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product deletion info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductDeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates an existing product for the specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update info with ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/products": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all products for the specified event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get all products from an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/promote": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Promotes a user to organizer role in an event. The following rules apply:\n- Only master users and master admins can promote others\n- Master users can promote normal users to admin or admins to master admin\n- Master admins can only promote normal users to admin\n- Users must be registered to the event to be promoted\n- Users cannot promote themselves\n- Master users cannot be promoted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Promote user in event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User email to promote",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAdminActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/purchase": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Processes a purchase of products for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Purchase products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Purchase info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PurchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Purchase"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/register": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Registers the authenticated user to an event by its slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Register to an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/unregister": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unregisters the authenticated user from an event by its slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Unregister from an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{slug}/user-activities": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all activities for a specified user from a specified event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of activities for a user from an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Activity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Logging successfully creates a refresh token in the database so the user can\ninvalidate specific session from any other session\\n\nReturns both an Access Token of 5 minutes duration and a Refresh Token of 2 days duration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs in the user",
                "parameters": [
                    {
                        "description": "User login info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.AuthTokensResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invalidates the refresh token used in the request in the database, effectively logging out the user from the current session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs out the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/refresh-tokens": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns all refresh tokens associated with the user's account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user's refresh tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.RefreshToken"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user in the system, generates a verification code that is stored\nin the database for 24 hours and sent in a verification email to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user and send a verification email",
                "parameters": [
                    {
                        "description": "User registration info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.AuthTokensResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/resend-verification-code": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generates a new verification code and resends it to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend verification code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/revoke-refresh-token": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invalidates a specific refresh token for the authenticated user\nCan't be passed the same refresh token the user is using to access the route",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Revoke a refresh token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Refresh token to revoke",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RevokeTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/switch-event-creator-status": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Switches a user's event creator status (enables/disables ability to create events). Only available to super users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Toggle event creator status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Target user email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SwitchEventCreatorStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-accesses": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all accesses for a specified user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of accesses for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.AccessTarget"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-activities": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all activities for a specified user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of activities for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Activity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-attended-activities": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The end point returns a list of all activities that the authenticated user has attended",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Retrieves a list of activities that the current user has attended",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Activity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActivityStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-events": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all events for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get user events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Event"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.EventStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-products": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all products for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get user products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-products-relation": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all products for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get user products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-purchases": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all purchases for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get user purchases",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Purchase"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-tokens": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a list of all tokens for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get user tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.UserToken"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProductStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/batch": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user info from ID array",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user info from ID array",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Array list of all users IDs",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserInfoBatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.UserInfoBatch"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/create-event-creator": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create an event creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create an event creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Create event creator request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateEventCreatorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user info from ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user info from ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.NoMessageSuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/verify-account": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Validates the verification token sent to user's email and marks the account as verified",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify user account with token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Verification token from email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/verify-tokens": {
            "post": {
                "description": "Validates both access token and refresh token signatures",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify JWT tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.NoDataSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthStandardErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "handlers.ActivityStandardErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "some error message"
                    ]
                },
                "stack": {
                    "type": "string",
                    "example": "activity-stack"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.AuthStandardErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "some error message"
                    ]
                },
                "stack": {
                    "type": "string",
                    "example": "auth-stack"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.AuthTokensResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handlers.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                }
            }
        },
        "handlers.ChangeUserNameRequest": {
            "type": "object",
            "properties": {
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateEventCreatorRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "handlers.EventStandardErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "some error message"
                    ]
                },
                "stack": {
                    "type": "string",
                    "example": "event-stack"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.NoDataSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "some success message"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.NoMessageSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.ProductStandardErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "some error message"
                    ]
                },
                "stack": {
                    "type": "string",
                    "example": "product-stack"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.RevokeTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handlers.SwitchEventCreatorStatusRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "handlers.UserAdminActionRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "handlers.UserInfoBatch": {
            "type": "object",
            "properties": {
                "id_array": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handlers.UserRegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handlers.VerifyAccountRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "models.AccessTarget": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "event_id": {
                    "description": "For searching purposes",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_event": {
                    "description": "True if target is an event, false if activity",
                    "type": "boolean"
                },
                "product_id": {
                    "type": "string"
                },
                "target_id": {
                    "description": "Event ID or Activity ID",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.AccessTargetRequest": {
            "type": "object",
            "properties": {
                "is_event": {
                    "type": "boolean"
                },
                "product_id": {
                    "type": "string"
                },
                "target_id": {
                    "type": "string"
                }
            }
        },
        "models.Activity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-10-15T14:00:00Z"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string",
                    "example": "Workshop introdutório sobre a linguagem Go"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-10-15T16:00:00Z"
                },
                "event_id": {
                    "description": "Event relationship - nullable for standalone activities",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "has_fee": {
                    "description": "If an event ticket or standalone ticket is required",
                    "type": "boolean",
                    "example": true
                },
                "has_unlimited_capacity": {
                    "description": "Changed from int to boolean flags for capacity management",
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_blocked": {
                    "description": "Whether the activity is blocked from interactions",
                    "type": "boolean",
                    "example": false
                },
                "is_hidden": {
                    "description": "Visibility and blocking",
                    "type": "boolean",
                    "example": false
                },
                "is_mandatory": {
                    "description": "Access control",
                    "type": "boolean",
                    "example": true
                },
                "is_standalone": {
                    "description": "Standalone properties",
                    "type": "boolean",
                    "example": false
                },
                "level": {
                    "$ref": "#/definitions/models.ActivityLevel"
                },
                "location": {
                    "type": "string",
                    "example": "Sala 101"
                },
                "max_capacity": {
                    "description": "Max capacity when HasUnlimitedCapacity is false",
                    "type": "integer",
                    "example": 30
                },
                "name": {
                    "type": "string",
                    "example": "Workshop de Go"
                },
                "needs_token": {
                    "description": "If a token is required for this activity",
                    "type": "boolean",
                    "example": true
                },
                "requirements": {
                    "type": "string"
                },
                "speaker": {
                    "type": "string",
                    "example": "John Doe"
                },
                "standalone_slug": {
                    "description": "Used when standalone",
                    "type": "string",
                    "example": "scti-wkg"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-10-15T14:00:00Z"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ActivityType"
                        }
                    ],
                    "example": "palestra"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-10-15T14:00:00Z"
                }
            }
        },
        "models.ActivityDeleteRequest": {
            "type": "object",
            "properties": {
                "activity_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "models.ActivityLevel": {
            "type": "string",
            "enum": [
                "easy",
                "medium",
                "hard"
            ],
            "x-enum-varnames": [
                "ActivityEasy",
                "ActivityMedium",
                "ActivityHard"
            ]
        },
        "models.ActivityRegistration": {
            "type": "object",
            "properties": {
                "access_method": {
                    "description": "Access method tracking",
                    "type": "string"
                },
                "activity_id": {
                    "type": "string"
                },
                "attended_at": {
                    "description": "Time of attendance, null if not attended yet",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "is_standalone_registration": {
                    "description": "Is this from an event or standalone",
                    "type": "boolean"
                },
                "product_id": {
                    "description": "Which product was used (if applicable)",
                    "type": "string"
                },
                "registered_at": {
                    "type": "string"
                },
                "token_id": {
                    "description": "Which token was used (if applicable)",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ActivityRegistrationRequest": {
            "type": "object",
            "properties": {
                "activity_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "user_id": {
                    "description": "Optional, used for admin actions on other users",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "models.ActivityType": {
            "type": "string",
            "enum": [
                "palestra",
                "mini-curso",
                "visita-tecnica"
            ],
            "x-enum-varnames": [
                "ActivityPalestra",
                "ActivityMiniCurso",
                "ActivityVisitaTecnica"
            ]
        },
        "models.ActivityUpdateRequest": {
            "type": "object",
            "properties": {
                "activity_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "description": {
                    "type": "string",
                    "example": "Workshop introdutório sobre a linguagem Go"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-10-15T16:00:00Z"
                },
                "has_fee": {
                    "type": "boolean",
                    "example": false
                },
                "has_unlimited_capacity": {
                    "type": "boolean",
                    "example": false
                },
                "is_blocked": {
                    "type": "boolean",
                    "example": false
                },
                "is_hidden": {
                    "type": "boolean",
                    "example": false
                },
                "is_mandatory": {
                    "type": "boolean",
                    "example": false
                },
                "is_standalone": {
                    "type": "boolean",
                    "example": false
                },
                "level": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ActivityLevel"
                        }
                    ],
                    "example": "easy"
                },
                "location": {
                    "type": "string",
                    "example": "Sala 101"
                },
                "max_capacity": {
                    "type": "integer",
                    "example": 30
                },
                "name": {
                    "type": "string",
                    "example": "Workshop de Go"
                },
                "requirements": {
                    "type": "string",
                    "example": "VSCode e Python 3.12"
                },
                "speaker": {
                    "type": "string",
                    "example": "John Doe"
                },
                "standalone_slug": {
                    "type": "string",
                    "example": "workshop-go-2024"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-10-15T14:00:00Z"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ActivityType"
                        }
                    ],
                    "example": "palestra"
                }
            }
        },
        "models.CreateActivityRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Workshop introdutório sobre a linguagem Go"
                },
                "end_time": {
                    "type": "string",
                    "example": "2024-10-15T16:00:00Z"
                },
                "has_fee": {
                    "type": "boolean",
                    "example": false
                },
                "has_unlimited_capacity": {
                    "type": "boolean",
                    "example": false
                },
                "is_blocked": {
                    "type": "boolean",
                    "example": false
                },
                "is_hidden": {
                    "type": "boolean",
                    "example": false
                },
                "is_mandatory": {
                    "type": "boolean",
                    "example": false
                },
                "is_standalone": {
                    "type": "boolean",
                    "example": false
                },
                "level": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ActivityLevel"
                        }
                    ],
                    "example": "easy"
                },
                "location": {
                    "type": "string",
                    "example": "Sala 101"
                },
                "max_capacity": {
                    "type": "integer",
                    "example": 30
                },
                "name": {
                    "type": "string",
                    "example": "Workshop de Go"
                },
                "requirements": {
                    "type": "string",
                    "example": "VSCode e Python 3.12"
                },
                "speaker": {
                    "type": "string",
                    "example": "John Doe"
                },
                "standalone_slug": {
                    "type": "string",
                    "example": "workshop-go-2024"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-10-15T14:00:00Z"
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ActivityType"
                        }
                    ],
                    "example": "palestra"
                }
            }
        },
        "models.CreateEventRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Learn Go programming"
                },
                "end_date": {
                    "type": "string",
                    "example": "2025-05-01T17:00:00Z"
                },
                "is_blocked": {
                    "type": "boolean",
                    "example": false
                },
                "is_hidden": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Room 101"
                },
                "max_tokens_per_user": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Go Workshop"
                },
                "slug": {
                    "type": "string",
                    "example": "gws"
                },
                "start_date": {
                    "type": "string",
                    "example": "2025-05-01T14:00:00Z"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "activities": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Activity"
                    }
                },
                "attendees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_blocked": {
                    "description": "Whether the event is blocked from interactions",
                    "type": "boolean"
                },
                "is_hidden": {
                    "description": "Visibility and blocking",
                    "type": "boolean"
                },
                "is_public": {
                    "description": "Admission control",
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "max_tokens_per_user": {
                    "description": "Maximum number of tokens a user can have for this event",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "participant_count": {
                    "type": "integer"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Product"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Product": {
            "type": "object",
            "properties": {
                "access_targets": {
                    "description": "Relationships - combined into single table with type flag",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccessTarget"
                    }
                },
                "bundled_products": {
                    "description": "Bundling",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Product"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "event_id": {
                    "description": "event the product is associated with",
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "has_unlimited_quantity": {
                    "description": "Stock management (for physical items)",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "is_activity_access": {
                    "description": "Grants activity access",
                    "type": "boolean"
                },
                "is_activity_token": {
                    "description": "Can be used as tokens for fee-based activities",
                    "type": "boolean"
                },
                "is_blocked": {
                    "description": "Whether the product is blocked from purchases",
                    "type": "boolean"
                },
                "is_event_access": {
                    "description": "Product type flags - a product can be multiple types",
                    "type": "boolean"
                },
                "is_hidden": {
                    "description": "Whether the product is hidden from search/listings",
                    "type": "boolean"
                },
                "is_physical_item": {
                    "description": "Is a physical merchandise item",
                    "type": "boolean"
                },
                "is_public": {
                    "description": "Visibility and blocking",
                    "type": "boolean"
                },
                "is_ticket_type": {
                    "description": "Is a ticket type (user can only have one)",
                    "type": "boolean"
                },
                "max_ownable_quantity": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price_int": {
                    "type": "integer"
                },
                "quantity": {
                    "description": "Available quantity",
                    "type": "integer"
                },
                "token_quantity": {
                    "description": "Token properties",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.ProductDeleteRequest": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string"
                }
            }
        },
        "models.ProductRequest": {
            "type": "object",
            "properties": {
                "access_targets": {
                    "description": "Access targets",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccessTargetRequest"
                    }
                },
                "description": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "has_unlimited_quantity": {
                    "description": "Stock management",
                    "type": "boolean"
                },
                "is_activity_access": {
                    "type": "boolean"
                },
                "is_activity_token": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_event_access": {
                    "description": "Product type flags",
                    "type": "boolean"
                },
                "is_hidden": {
                    "type": "boolean"
                },
                "is_physical_item": {
                    "type": "boolean"
                },
                "is_public": {
                    "description": "Visibility and blocking",
                    "type": "boolean"
                },
                "is_ticket_type": {
                    "type": "boolean"
                },
                "max_ownable_quantity": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price_int": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "token_quantity": {
                    "description": "Token properties",
                    "type": "integer"
                }
            }
        },
        "models.ProductUpdateRequest": {
            "type": "object",
            "properties": {
                "product": {
                    "$ref": "#/definitions/models.ProductRequest"
                },
                "product_id": {
                    "type": "string"
                }
            }
        },
        "models.Purchase": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "delivered_at": {
                    "type": "string"
                },
                "gifted_to_email": {
                    "description": "User ID of gift recipient",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_delivered": {
                    "description": "For physical items",
                    "type": "boolean"
                },
                "is_gift": {
                    "description": "For gifting functionality",
                    "type": "boolean"
                },
                "product_id": {
                    "type": "string"
                },
                "purchased_at": {
                    "type": "string"
                },
                "quantity": {
                    "description": "How many of this product",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "User who made the purchase",
                    "type": "string"
                }
            }
        },
        "models.PurchaseRequest": {
            "type": "object",
            "properties": {
                "gifted_to_email": {
                    "description": "User email of gift recipient",
                    "type": "string"
                },
                "is_gift": {
                    "description": "For gifting functionality",
                    "type": "boolean"
                },
                "payment_method_id": {
                    "type": "string"
                },
                "payment_method_installments": {
                    "type": "integer"
                },
                "payment_method_token": {
                    "type": "string"
                },
                "payment_method_type": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "models.RefreshToken": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "token_str": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.UpdateEventRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Updated workshop description"
                },
                "end_date": {
                    "type": "string",
                    "example": "2030-11-11T23:59:59Z"
                },
                "is_blocked": {
                    "type": "boolean",
                    "example": false
                },
                "is_hidden": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Room 202"
                },
                "max_tokens_per_user": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Updated Workshop"
                },
                "slug": {
                    "type": "string",
                    "example": "uws"
                },
                "start_date": {
                    "type": "string",
                    "example": "2030-11-11T00:00:00Z"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_event_creator": {
                    "type": "boolean"
                },
                "is_super_user": {
                    "type": "boolean"
                },
                "is_uenf": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Product"
                    }
                },
                "uenf_semester": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@carmack.com"
                },
                "is_uenf": {
                    "type": "boolean",
                    "example": true
                },
                "last_name": {
                    "type": "string",
                    "example": "Carmack"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "uenf_semester": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.UserToken": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "event_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_used": {
                    "type": "boolean"
                },
                "product_id": {
                    "description": "Original product that created this token",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "used_at": {
                    "type": "string"
                },
                "used_for_id": {
                    "description": "Activity ID if used",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_product_id": {
                    "description": "Which user product this token belongs to",
                    "type": "string"
                }
            }
        }
    }
}