basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handlers.ActivityStandardErrorResponse:
    properties:
      errors:
        example:
        - some error message
        items:
          type: string
        type: array
      stack:
        example: activity-stack
        type: string
      success:
        example: false
        type: boolean
    type: object
  handlers.AuthStandardErrorResponse:
    properties:
      errors:
        example:
        - some error message
        items:
          type: string
        type: array
      stack:
        example: auth-stack
        type: string
      success:
        example: false
        type: boolean
    type: object
  handlers.AuthTokensResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  handlers.ChangePasswordRequest:
    properties:
      new_password:
        type: string
    type: object
  handlers.ChangeUserNameRequest:
    properties:
      last_name:
        type: string
      name:
        type: string
    type: object
  handlers.CreateEventCreatorRequest:
    properties:
      email:
        type: string
    type: object
  handlers.EventStandardErrorResponse:
    properties:
      errors:
        example:
        - some error message
        items:
          type: string
        type: array
      stack:
        example: event-stack
        type: string
      success:
        example: false
        type: boolean
    type: object
  handlers.NoDataSuccessResponse:
    properties:
      data: {}
      message:
        example: some success message
        type: string
      success:
        example: true
        type: boolean
    type: object
  handlers.NoMessageSuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        example: true
        type: boolean
    type: object
  handlers.ProductStandardErrorResponse:
    properties:
      errors:
        example:
        - some error message
        items:
          type: string
        type: array
      stack:
        example: product-stack
        type: string
      success:
        example: false
        type: boolean
    type: object
  handlers.RevokeTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  handlers.SwitchEventCreatorStatusRequest:
    properties:
      email:
        example: user@example.com
        type: string
    type: object
  handlers.UserAdminActionRequest:
    properties:
      email:
        example: user@example.com
        type: string
    type: object
  handlers.UserInfoBatch:
    properties:
      id_array:
        items:
          type: string
        type: array
    type: object
  handlers.UserLoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  handlers.UserRegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      last_name:
        example: Doe
        type: string
      name:
        example: John
        type: string
      password:
        example: password123
        type: string
    type: object
  handlers.VerifyAccountRequest:
    properties:
      token:
        example: "123456"
        type: string
    type: object
  models.AccessTarget:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      event_id:
        description: For searching purposes
        type: string
      id:
        type: string
      is_event:
        description: True if target is an event, false if activity
        type: boolean
      product_id:
        type: string
      target_id:
        description: Event ID or Activity ID
        type: string
      updated_at:
        type: string
    type: object
  models.AccessTargetRequest:
    properties:
      is_event:
        type: boolean
      product_id:
        type: string
      target_id:
        type: string
    type: object
  models.Activity:
    properties:
      created_at:
        example: "2024-10-15T14:00:00Z"
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        example: Workshop introdutório sobre a linguagem Go
        type: string
      end_time:
        example: "2024-10-15T16:00:00Z"
        type: string
      event_id:
        description: Event relationship - nullable for standalone activities
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      has_fee:
        description: If an event ticket or standalone ticket is required
        example: true
        type: boolean
      has_unlimited_capacity:
        description: Changed from int to boolean flags for capacity management
        example: true
        type: boolean
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_blocked:
        description: Whether the activity is blocked from interactions
        example: false
        type: boolean
      is_hidden:
        description: Visibility and blocking
        example: false
        type: boolean
      is_mandatory:
        description: Access control
        example: true
        type: boolean
      is_standalone:
        description: Standalone properties
        example: false
        type: boolean
      level:
        $ref: '#/definitions/models.ActivityLevel'
      location:
        example: Sala 101
        type: string
      max_capacity:
        description: Max capacity when HasUnlimitedCapacity is false
        example: 30
        type: integer
      name:
        example: Workshop de Go
        type: string
      needs_token:
        description: If a token is required for this activity
        example: true
        type: boolean
      requirements:
        type: string
      speaker:
        example: John Doe
        type: string
      standalone_slug:
        description: Used when standalone
        example: scti-wkg
        type: string
      start_time:
        example: "2024-10-15T14:00:00Z"
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.ActivityType'
        example: palestra
      updated_at:
        example: "2024-10-15T14:00:00Z"
        type: string
    type: object
  models.ActivityDeleteRequest:
    properties:
      activity_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.ActivityLevel:
    enum:
    - easy
    - medium
    - hard
    type: string
    x-enum-varnames:
    - ActivityEasy
    - ActivityMedium
    - ActivityHard
  models.ActivityRegistration:
    properties:
      access_method:
        description: Access method tracking
        type: string
      activity_id:
        type: string
      attended_at:
        description: Time of attendance, null if not attended yet
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      is_standalone_registration:
        description: Is this from an event or standalone
        type: boolean
      product_id:
        description: Which product was used (if applicable)
        type: string
      registered_at:
        type: string
      token_id:
        description: Which token was used (if applicable)
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.ActivityRegistrationRequest:
    properties:
      activity_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      user_id:
        description: Optional, used for admin actions on other users
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.ActivityType:
    enum:
    - palestra
    - mini-curso
    - visita-tecnica
    type: string
    x-enum-varnames:
    - ActivityPalestra
    - ActivityMiniCurso
    - ActivityVisitaTecnica
  models.ActivityUpdateRequest:
    properties:
      activity_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      description:
        example: Workshop introdutório sobre a linguagem Go
        type: string
      end_time:
        example: "2024-10-15T16:00:00Z"
        type: string
      has_fee:
        example: false
        type: boolean
      has_unlimited_capacity:
        example: false
        type: boolean
      is_blocked:
        example: false
        type: boolean
      is_hidden:
        example: false
        type: boolean
      is_mandatory:
        example: false
        type: boolean
      is_standalone:
        example: false
        type: boolean
      level:
        allOf:
        - $ref: '#/definitions/models.ActivityLevel'
        example: easy
      location:
        example: Sala 101
        type: string
      max_capacity:
        example: 30
        type: integer
      name:
        example: Workshop de Go
        type: string
      requirements:
        example: VSCode e Python 3.12
        type: string
      speaker:
        example: John Doe
        type: string
      standalone_slug:
        example: workshop-go-2024
        type: string
      start_time:
        example: "2024-10-15T14:00:00Z"
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.ActivityType'
        example: palestra
    type: object
  models.CreateActivityRequest:
    properties:
      description:
        example: Workshop introdutório sobre a linguagem Go
        type: string
      end_time:
        example: "2024-10-15T16:00:00Z"
        type: string
      has_fee:
        example: false
        type: boolean
      has_unlimited_capacity:
        example: false
        type: boolean
      is_blocked:
        example: false
        type: boolean
      is_hidden:
        example: false
        type: boolean
      is_mandatory:
        example: false
        type: boolean
      is_standalone:
        example: false
        type: boolean
      level:
        allOf:
        - $ref: '#/definitions/models.ActivityLevel'
        example: easy
      location:
        example: Sala 101
        type: string
      max_capacity:
        example: 30
        type: integer
      name:
        example: Workshop de Go
        type: string
      requirements:
        example: VSCode e Python 3.12
        type: string
      speaker:
        example: John Doe
        type: string
      standalone_slug:
        example: workshop-go-2024
        type: string
      start_time:
        example: "2024-10-15T14:00:00Z"
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.ActivityType'
        example: palestra
    type: object
  models.CreateEventRequest:
    properties:
      description:
        example: Learn Go programming
        type: string
      end_date:
        example: "2025-05-01T17:00:00Z"
        type: string
      is_blocked:
        example: false
        type: boolean
      is_hidden:
        example: true
        type: boolean
      location:
        example: Room 101
        type: string
      max_tokens_per_user:
        example: 1
        type: integer
      name:
        example: Go Workshop
        type: string
      slug:
        example: gws
        type: string
      start_date:
        example: "2025-05-01T14:00:00Z"
        type: string
    type: object
  models.Event:
    properties:
      activities:
        description: Relationships
        items:
          $ref: '#/definitions/models.Activity'
        type: array
      attendees:
        items:
          $ref: '#/definitions/models.User'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      is_blocked:
        description: Whether the event is blocked from interactions
        type: boolean
      is_hidden:
        description: Visibility and blocking
        type: boolean
      is_public:
        description: Admission control
        type: boolean
      location:
        type: string
      max_tokens_per_user:
        description: Maximum number of tokens a user can have for this event
        type: integer
      name:
        type: string
      participant_count:
        type: integer
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      slug:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      access_targets:
        description: Relationships - combined into single table with type flag
        items:
          $ref: '#/definitions/models.AccessTarget'
        type: array
      bundled_products:
        description: Bundling
        items:
          $ref: '#/definitions/models.Product'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      event_id:
        description: event the product is associated with
        type: string
      expires_at:
        type: string
      has_unlimited_quantity:
        description: Stock management (for physical items)
        type: boolean
      id:
        type: string
      is_activity_access:
        description: Grants activity access
        type: boolean
      is_activity_token:
        description: Can be used as tokens for fee-based activities
        type: boolean
      is_blocked:
        description: Whether the product is blocked from purchases
        type: boolean
      is_event_access:
        description: Product type flags - a product can be multiple types
        type: boolean
      is_hidden:
        description: Whether the product is hidden from search/listings
        type: boolean
      is_physical_item:
        description: Is a physical merchandise item
        type: boolean
      is_public:
        description: Visibility and blocking
        type: boolean
      is_ticket_type:
        description: Is a ticket type (user can only have one)
        type: boolean
      max_ownable_quantity:
        type: integer
      name:
        type: string
      price_int:
        type: integer
      quantity:
        description: Available quantity
        type: integer
      token_quantity:
        description: Token properties
        type: integer
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.ProductDeleteRequest:
    properties:
      product_id:
        type: string
    type: object
  models.ProductRequest:
    properties:
      access_targets:
        description: Access targets
        items:
          $ref: '#/definitions/models.AccessTargetRequest'
        type: array
      description:
        type: string
      event_id:
        type: string
      expires_at:
        type: string
      has_unlimited_quantity:
        description: Stock management
        type: boolean
      is_activity_access:
        type: boolean
      is_activity_token:
        type: boolean
      is_blocked:
        type: boolean
      is_event_access:
        description: Product type flags
        type: boolean
      is_hidden:
        type: boolean
      is_physical_item:
        type: boolean
      is_public:
        description: Visibility and blocking
        type: boolean
      is_ticket_type:
        type: boolean
      max_ownable_quantity:
        type: integer
      name:
        type: string
      price_int:
        type: integer
      quantity:
        type: integer
      token_quantity:
        description: Token properties
        type: integer
    type: object
  models.ProductUpdateRequest:
    properties:
      product:
        $ref: '#/definitions/models.ProductRequest'
      product_id:
        type: string
    type: object
  models.Purchase:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      delivered_at:
        type: string
      gifted_to_email:
        description: User ID of gift recipient
        type: string
      id:
        type: string
      is_delivered:
        description: For physical items
        type: boolean
      is_gift:
        description: For gifting functionality
        type: boolean
      product_id:
        type: string
      purchased_at:
        type: string
      quantity:
        description: How many of this product
        type: integer
      updated_at:
        type: string
      user_id:
        description: User who made the purchase
        type: string
    type: object
  models.PurchaseRequest:
    properties:
      gifted_to_email:
        description: User email of gift recipient
        type: string
      is_gift:
        description: For gifting functionality
        type: boolean
      payment_method_id:
        type: string
      payment_method_installments:
        type: integer
      payment_method_token:
        type: string
      payment_method_type:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  models.RefreshToken:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      token_str:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateEventRequest:
    properties:
      description:
        example: Updated workshop description
        type: string
      end_date:
        example: "2030-11-11T23:59:59Z"
        type: string
      is_blocked:
        example: false
        type: boolean
      is_hidden:
        example: true
        type: boolean
      location:
        example: Room 202
        type: string
      max_tokens_per_user:
        example: 1
        type: integer
      name:
        example: Updated Workshop
        type: string
      slug:
        example: uws
        type: string
      start_date:
        example: "2030-11-11T00:00:00Z"
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      is_event_creator:
        type: boolean
      is_super_user:
        type: boolean
      is_uenf:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      uenf_semester:
        type: integer
      updated_at:
        type: string
    type: object
  models.UserInfo:
    properties:
      email:
        example: john@carmack.com
        type: string
      is_uenf:
        example: true
        type: boolean
      last_name:
        example: Carmack
        type: string
      name:
        example: John
        type: string
      uenf_semester:
        example: 5
        type: integer
    type: object
  models.UserToken:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      event_id:
        type: string
      id:
        type: string
      is_used:
        type: boolean
      product_id:
        description: Original product that created this token
        type: string
      updated_at:
        type: string
      used_at:
        type: string
      used_for_id:
        description: Activity ID if used
        type: string
      user_id:
        type: string
      user_product_id:
        description: Which user product this token belongs to
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for SCTI 2025
  title: SCTI 2025 API
  version: "1.0"
paths:
  /change-name:
    post:
      consumes:
      - application/json
      description: Updates the authenticated user's first and last name
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: New name information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangeUserNameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Change user name
      tags:
      - auth
  /change-password:
    post:
      consumes:
      - application/json
      description: Changes the user's password using a reset token
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: New password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - auth
  /events:
    get:
      description: Returns a list of all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Creates a new event. Only master users can create events
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event creation info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Create a new event
      tags:
      - events
  /events/{slug}:
    delete:
      description: Deletes an existing event using its slug. Only master users can
        delete events
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Delete an event by slug
      tags:
      - events
    get:
      description: Returns an event's details by its slug
      parameters:
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      summary: Get event by slug
      tags:
      - events
    patch:
      consumes:
      - application/json
      description: Updates an existing event using its slug. Only master users can
        update events
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Event update info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Update an event by slug
      tags:
      - events
  /events/{slug}/accesses:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all accesses for a specified user
        from a specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.AccessTarget'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of accesses for a user from an event
      tags:
      - activities
  /events/{slug}/activities:
    get:
      description: Returns all activities for the specified event
      parameters:
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Activity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      summary: Get all activities for an event
      tags:
      - activities
  /events/{slug}/activity:
    delete:
      consumes:
      - application/json
      description: Deletes an existing activity from the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity deletion info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityDeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Delete an activity
      tags:
      - activities
    patch:
      consumes:
      - application/json
      description: Updates an existing activity for the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity update info with ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Activity'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Update an activity
      tags:
      - activities
    post:
      consumes:
      - application/json
      description: Creates a new activity for the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity creation info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Activity'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Create a new activity for an event
      tags:
      - activities
  /events/{slug}/activity/attend:
    post:
      consumes:
      - application/json
      description: Marks a user as having attended an activity (admin only)
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Attendance info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Mark attendance for an activity
      tags:
      - activities
  /events/{slug}/activity/attendants/{id}:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all attendants for a specified
        activity
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ActivityRegistration'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of attendants for an activity
      tags:
      - activities
  /events/{slug}/activity/register:
    post:
      consumes:
      - application/json
      description: Registers the authenticated user to an activity within an event
        they are already registered for
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Register to an activity
      tags:
      - activities
  /events/{slug}/activity/register-standalone:
    post:
      consumes:
      - application/json
      description: Registers the authenticated user to a standalone activity without
        requiring event registration
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Register to a standalone activity
      tags:
      - activities
  /events/{slug}/activity/registrations/{id}:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all registrations of a specified
        activity (all admins)
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ActivityRegistration'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of registrations of an activity
      tags:
      - activities
  /events/{slug}/activity/unattend:
    post:
      consumes:
      - application/json
      description: Removes a user's attendance record for an activity (master admin
        only)
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Attendance info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Remove attendance for an activity
      tags:
      - activities
  /events/{slug}/activity/unregister:
    post:
      consumes:
      - application/json
      description: Unregisters the authenticated user from an activity within an event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Unregister from an activity
      tags:
      - activities
  /events/{slug}/activity/unregister-standalone:
    post:
      consumes:
      - application/json
      description: Unregisters the authenticated user from a standalone activity
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Activity registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ActivityRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Unregister from a standalone activity
      tags:
      - activities
  /events/{slug}/demote:
    post:
      consumes:
      - application/json
      description: |-
        Demotes a user from their admin role in an event. The following rules apply:
        - Only super users, event creators and master admins can demote others
        - Super users and event creators can demote any admin (master or normal)
        - Master admins can only demote normal admins
        - Users cannot demote themselves
        - Super users and event creators cannot be demoted
        - Super users and event creators cannot be promoted
        - Target must be an admin of the event
        - Targets can be demoted if they unregister from the event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: User email to demote
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserAdminActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Demote user in event
      tags:
      - events
  /events/{slug}/product:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product from the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Product deletion info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductDeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Delete a product
      tags:
      - products
    patch:
      consumes:
      - application/json
      description: Updates an existing product for the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Product update info with ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Update a product
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product for the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Product creation info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Create a product for an event
      tags:
      - products
  /events/{slug}/products:
    get:
      description: Returns a list of all products for the specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get all products from an event
      tags:
      - products
  /events/{slug}/promote:
    post:
      consumes:
      - application/json
      description: |-
        Promotes a user to organizer role in an event. The following rules apply:
        - Only master users and master admins can promote others
        - Master users can promote normal users to admin or admins to master admin
        - Master admins can only promote normal users to admin
        - Users must be registered to the event to be promoted
        - Users cannot promote themselves
        - Master users cannot be promoted
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: User email to promote
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserAdminActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Promote user in event
      tags:
      - events
  /events/{slug}/purchase:
    post:
      consumes:
      - application/json
      description: Processes a purchase of products for the authenticated user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      - description: Purchase info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Purchase'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Purchase products
      tags:
      - products
  /events/{slug}/register:
    post:
      description: Registers the authenticated user to an event by its slug
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Register to an event
      tags:
      - events
  /events/{slug}/unregister:
    post:
      description: Unregisters the authenticated user from an event by its slug
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Unregister from an event
      tags:
      - events
  /events/{slug}/user-activities:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all activities for a specified
        user from a specified event
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Event slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Activity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of activities for a user from an event
      tags:
      - activities
  /events/created:
    get:
      description: Returns a list of all events created by a user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get events created by a user
      tags:
      - events
  /events/public:
    get:
      description: Returns a list of all public events (where IsPublic=true)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      summary: Get all public events
      tags:
      - events
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Logging successfully creates a refresh token in the database so the user can
        invalidate specific session from any other session\n
        Returns both an Access Token of 5 minutes duration and a Refresh Token of 2 days duration
      parameters:
      - description: User login info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.AuthTokensResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      summary: Logs in the user
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Invalidates the refresh token used in the request in the database,
        effectively logging out the user from the current session
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Logs out the user
      tags:
      - auth
  /refresh-tokens:
    get:
      description: Returns all refresh tokens associated with the user's account
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RefreshToken'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user's refresh tokens
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: |-
        Register a new user in the system, generates a verification code that is stored
        in the database for 24 hours and sent in a verification email to the user
      parameters:
      - description: User registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.AuthTokensResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      summary: Register new user and send a verification email
      tags:
      - auth
  /resend-verification-code:
    post:
      consumes:
      - application/json
      description: Generates a new verification code and resends it to the authenticated
        user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Resend verification code
      tags:
      - auth
  /revoke-refresh-token:
    post:
      consumes:
      - application/json
      description: |-
        Invalidates a specific refresh token for the authenticated user
        Can't be passed the same refresh token the user is using to access the route
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Refresh token to revoke
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RevokeTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Revoke a refresh token
      tags:
      - auth
  /switch-event-creator-status:
    post:
      consumes:
      - application/json
      description: Switches a user's event creator status (enables/disables ability
        to create events). Only available to super users.
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Target user email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SwitchEventCreatorStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Toggle event creator status
      tags:
      - auth
  /user-accesses:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all accesses for a specified user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.AccessTarget'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of accesses for a user
      tags:
      - activities
  /user-activities:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all activities for a specified
        user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Activity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of activities for a user
      tags:
      - activities
  /user-attended-activities:
    get:
      consumes:
      - application/json
      description: The end point returns a list of all activities that the authenticated
        user has attended
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Activity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ActivityStandardErrorResponse'
      security:
      - Bearer: []
      summary: Retrieves a list of activities that the current user has attended
      tags:
      - activities
  /user-events:
    get:
      description: Returns a list of all events for the authenticated user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.EventStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user events
      tags:
      - events
  /user-products:
    get:
      description: Returns a list of all products for the authenticated user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user products
      tags:
      - products
  /user-products-relation:
    get:
      description: Returns a list of all products for the authenticated user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user products
      tags:
      - products
  /user-purchases:
    get:
      description: Returns a list of all purchases for the authenticated user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Purchase'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user purchases
      tags:
      - products
  /user-tokens:
    get:
      description: Returns a list of all tokens for the authenticated user
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserToken'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ProductStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user tokens
      tags:
      - products
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user info from ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user info from ID
      tags:
      - users
  /users/batch:
    post:
      consumes:
      - application/json
      description: Get user info from ID array
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Array list of all users IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserInfoBatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.NoMessageSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.UserInfoBatch'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Get user info from ID array
      tags:
      - users
  /users/create-event-creator:
    post:
      consumes:
      - application/json
      description: Create an event creator
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Create event creator request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateEventCreatorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoMessageSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Create an event creator
      tags:
      - users
  /verify-account:
    post:
      consumes:
      - application/json
      description: Validates the verification token sent to user's email and marks
        the account as verified
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      - description: Verification token from email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.VerifyAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      security:
      - Bearer: []
      summary: Verify user account with token
      tags:
      - auth
  /verify-tokens:
    post:
      description: Validates both access token and refresh token signatures
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bearer {refresh_token}
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NoDataSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthStandardErrorResponse'
      summary: Verify JWT tokens
      tags:
      - auth
swagger: "2.0"
